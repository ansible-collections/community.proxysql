---
####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

### tests

- name: "{{ role_name }} | test_create_using_check_mode | test create replication hostgroups using check mode"
  import_tasks: test_create_using_check_mode.yml
  vars:
    test_proxysql_replication_hostgroups_check_mode: true

- name: "{{ role_name }} | test_delete_using_check_mode | test delete replication hostgroups using check mode"
  import_tasks: test_delete_using_check_mode.yml
  vars:
    test_proxysql_replication_hostgroups_check_mode: true

- name: "{{ role_name }} | test_create_replication_hostgroups | test create replication hostgroups"
  import_tasks: test_create_replication_hostgroups.yml
  vars:
    test_proxysql_replication_hostgroups_cleanup_after_test: false
- name: "{{ role_name }} | test_create_replication_hostgroups | test idempotence of create replication hostgroups"
  import_tasks: test_create_replication_hostgroups.yml
  vars:
    test_proxysql_replication_hostgroups_check_idempotence: true

- name: "{{ role_name }} | test_delete_replication_hostgroups | test delete replication hostgroups"
  import_tasks: test_delete_replication_hostgroups.yml
  vars:
    test_proxysql_replication_hostgroups_cleanup_after_test: false
- name: "{{ role_name }} | test_delete_replication_hostgroups | test idempotence of delete replication hostgroups"
  import_tasks: test_delete_replication_hostgroups.yml
  vars:
    test_proxysql_replication_hostgroups_check_idempotence: true

- name: "{{ role_name }} | test_create_replication_hostgroups_in_memory_only | test create replication hostgroups in memory"
  import_tasks: test_create_replication_hostgroups_in_memory_only.yml
  vars:
    test_proxysql_replication_hostgroups_in_memory_only: true
    test_proxysql_replication_hostgroups_cleanup_after_test: false
- name: "{{ role_name }} | test_create_replication_hostgroups_in_memory_only | test idempotence of create replication hostgroups in memory"
  import_tasks: test_create_replication_hostgroups_in_memory_only.yml
  vars:
    test_proxysql_replication_hostgroups_in_memory_only: true
    test_proxysql_replication_hostgroups_check_idempotence: true

- name: "{{ role_name }} | test_delete_replication_hostgroups_in_memory_only | test delete replication hostgroups in memory"
  import_tasks: test_delete_replication_hostgroups_in_memory_only.yml
  vars:
    test_proxysql_replication_hostgroups_in_memory_only: true
    test_proxysql_replication_hostgroups_cleanup_after_test: false
- name: "{{ role_name }} | test_delete_replication_hostgroups_in_memory_only | test idempotence of delete replication hostgroups in memory"
  import_tasks: test_delete_replication_hostgroups_in_memory_only.yml
  vars:
    test_proxysql_replication_hostgroups_in_memory_only: true
    test_proxysql_replication_hostgroups_check_idempotence: true

- name: "{{ role_name }} | test_create_replication_hostgroups_with_delayed_persist | test create replication hostgroups with delayed save to disk/load to runtime"
  import_tasks: test_create_replication_hostgroups_with_delayed_persist.yml
  vars:
    test_proxysql_replication_hostgroups_in_memory_only: true
    test_proxysql_replication_hostgroups_with_delayed_persist: true
    test_proxysql_replication_hostgroups_cleanup_after_test: false
- name: "{{ role_name }} | test_create_replication_hostgroups_with_delayed_persist | test idempotence of create replication hostgroups with delayed save to disk/load to runtime"
  import_tasks: test_create_replication_hostgroups_with_delayed_persist.yml
  vars:
    test_proxysql_replication_hostgroups_in_memory_only: true
    test_proxysql_replication_hostgroups_with_delayed_persist: true
    test_proxysql_replication_hostgroups_check_idempotence: true

- name: "{{ role_name }} | test_delete_replication_hostgroups_with_delayed_persist | test delete replication hostgroups with delayed save to disk/load to runtime"
  import_tasks: test_delete_replication_hostgroups_with_delayed_persist.yml
  vars:
    test_proxysql_replication_hostgroups_in_memory_only: true
    test_proxysql_replication_hostgroups_with_delayed_persist: true
    test_proxysql_replication_hostgroups_cleanup_after_test: false
- name: "{{ role_name }} | test_delete_replication_hostgroups_with_delayed_persist | test idempotence of delete replication hostgroups with delayed save to disk/load to runtime"
  import_tasks: test_delete_replication_hostgroups_with_delayed_persist.yml
  vars:
    test_proxysql_replication_hostgroups_in_memory_only: true
    test_proxysql_replication_hostgroups_with_delayed_persist: true
    test_proxysql_replication_hostgroups_check_idempotence: true

- name: "gather proxysql informations"
  community.proxysql.proxysql_info:
    login_user: admin
    login_password: admin
  register: proxysql_information

- name: create replication hostgroup
  community.proxysql.proxysql_replication_hostgroups:
    login_user: admin
    login_password: admin
    writer_hostgroup: 100
    reader_hostgroup: 200
  register: special_condition

- name: verify change
  assert:
    that:
      - special_condition is changed

- name: >
    test conditions that are failing in the past
  block:
    - name: change reader hostgroup
      community.proxysql.proxysql_replication_hostgroups:
        login_user: admin
        login_password: admin
        writer_hostgroup: 100
        reader_hostgroup: 300
      register: special_condition

    - name: verify change
      assert:
        that:
          - special_condition is changed

    - name: update check_type (check_mode)
      community.proxysql.proxysql_replication_hostgroups:
        login_user: admin
        login_password: admin
        writer_hostgroup: 100
        reader_hostgroup: 300
        check_type: innodb_read_only
      register: special_condition
      check_mode: true

    - name: verify check_mode - change for proxysql > 2
      when: proxysql_information.version.major >= 2
      assert:
        that:
          - special_condition is changed

    - name: verify check_mode - no change for proxysql < 2
      when: proxysql_information.version.major < 2
      assert:
        that:
          - special_condition is not changed

    - name: update check_type
      community.proxysql.proxysql_replication_hostgroups:
        login_user: admin
        login_password: admin
        writer_hostgroup: 100
        reader_hostgroup: 300
        check_type: innodb_read_only
      register: special_condition

    - name: verify - change for proxysql >= 2
      when: proxysql_information.version.major >= 2
      assert:
        that:
          - special_condition is changed

    - name: verify - no change for proxysql < 2
      when: proxysql_information.version.major < 2
      assert:
        that:
          - special_condition is not changed

    - name: update check_type (idempotent)
      community.proxysql.proxysql_replication_hostgroups:
        login_user: admin
        login_password: admin
        writer_hostgroup: 100
        reader_hostgroup: 300
        check_type: innodb_read_only
      register: special_condition

    - name: verify idempotent - change for proxysql >= 2
      when: proxysql_information.version.major >= 2
      assert:
        that:
          - special_condition is not changed

    - name: verify idempotent - no change for proxysql < 2
      when: proxysql_information.version.major < 2
      assert:
        that:
          - special_condition is not changed

- name: >
    test reader hostgroup become 0
    when testing against proxysql >= 2.0.0
  when: proxysql_information.version.major >= 2
  block:
    - name: set reader hostgroup to 0
      community.proxysql.proxysql_replication_hostgroups:
        login_user: admin
        login_password: admin
        writer_hostgroup: 100
        reader_hostgroup: 0
        check_type: innodb_read_only
      register: special_condition

    - name: verify change
      assert:
        that: 
          - special_condition is changed

    - name: set reader hostgroup to 0 (immutable)
      community.proxysql.proxysql_replication_hostgroups:
        login_user: admin
        login_password: admin
        writer_hostgroup: 100
        reader_hostgroup: 0
        check_type: innodb_read_only
      register: special_condition

    - name: verify change
      assert:
        that:
          - special_condition is not changed

### teardown

- name: "{{ role_name }} | teardown | perform teardown"
  import_tasks: teardown.yml
